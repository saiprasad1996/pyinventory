#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jan 25, 2018 01:34:38 AM
# import sys
# from tkinter import messagebox

# try:
#     from Tkinter import *
# except ImportError:
#     from tkinter import *

# try:
#     import ttk

#     py3 = 0
# except ImportError:
#     import tkinter.ttk as ttk

#     py3 = 1

# from . import additem_support
# from backend import models


# def vp_start_gui():
#     '''Starting point when module is the main routine.'''
#     global val, w, root
#     root = Tk()
#     additem_support.set_Tk_var()
#     top = Add_Item(root)
#     additem_support.init(root, top)
#     root.mainloop()


# w = None


# def create_Add_Item(root, *args, **kwargs):
#     '''Starting point when module is imported by another program.'''
#     global w, w_win, rt
#     rt = root
#     w = Toplevel(root)
#     additem_support.set_Tk_var()
#     top = Add_Item(w)
#     additem_support.init(w, top, *args, **kwargs)
#     return (w, top)


# def destroy_Add_Item():
#     global w
#     w.destroy()
#     w = None


# class Add_Item:
#     def addItem(self):
#         try:
#             itemname = additem_support.productname.get()
#             itembarcode = additem_support.barcode.get()
#             price = float(additem_support.price.get())
#             item = models.Item(name=itemname, price=price)
#             saved = item.save(insert=True)
#             if saved == 1:
#                 messagebox.showinfo(title="Success", message="Item {} added successfully".format(itemname))

#                 self.barcode.delete(0, END)
#                 self.price.delete(0, END)
#                 self.productname.delete(0, END)
#                 self.productname.focus()
#             else:
#                 messagebox.showinfo(title="Failed", message="Couldnot add {}".format(itemname))
#         except ValueError:
#             messagebox.showinfo(title="Warning", message="Price must be a Number")

#     def __init__(self, top=None):
#         '''This class configures and populates the toplevel window.
#            top is the toplevel containing window.'''
#         _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
#         _fgcolor = '#000000'  # X11 color: 'black'
#         _compcolor = '#d9d9d9'  # X11 color: 'gray85'
#         _ana1color = '#d9d9d9'  # X11 color: 'gray85'
#         _ana2color = '#d9d9d9'  # X11 color: 'gray85'
#         font10 = "-family {Segoe UI} -size 20 -weight bold -slant " \
#                  "roman -underline 0 -overstrike 0"

#         top.geometry("600x454+477+165")
#         top.title("Add Item")
#         top.configure(background="#ffddcc")
#         top.configure(highlightbackground="#d9d9d9")
#         top.configure(highlightcolor="black")

#         self.productname = Entry(top)
#         self.productname.place(relx=0.28, rely=0.2, relheight=0.07
#                                , relwidth=0.39)
#         self.productname.configure(background="white")
#         self.productname.configure(disabledforeground="#a3a3a3")
#         self.productname.configure(font="TkFixedFont")
#         self.productname.configure(foreground="#000000")
#         self.productname.configure(highlightbackground="#d9d9d9")
#         self.productname.configure(highlightcolor="black")
#         self.productname.configure(insertbackground="black")
#         self.productname.configure(selectbackground="#c4c4c4")
#         self.productname.configure(selectforeground="black")
#         self.productname.configure(textvariable=additem_support.productname)

#         self.barcode = Entry(top)
#         self.barcode.place(relx=0.28, rely=0.31, relheight=0.07, relwidth=0.39)
#         self.barcode.configure(background="white")
#         self.barcode.configure(disabledforeground="#a3a3a3")
#         self.barcode.configure(font="TkFixedFont")
#         self.barcode.configure(foreground="#000000")
#         self.barcode.configure(highlightbackground="#d9d9d9")
#         self.barcode.configure(highlightcolor="black")
#         self.barcode.configure(insertbackground="black")
#         self.barcode.configure(selectbackground="#c4c4c4")
#         self.barcode.configure(selectforeground="black")
#         self.barcode.configure(textvariable=additem_support.barcode)

#         self.price = Entry(top)
#         self.price.place(relx=0.28, rely=0.42, relheight=0.07, relwidth=0.39)
#         self.price.configure(background="white")
#         self.price.configure(disabledforeground="#a3a3a3")
#         self.price.configure(font="TkFixedFont")
#         self.price.configure(foreground="#000000")
#         self.price.configure(highlightbackground="#d9d9d9")
#         self.price.configure(highlightcolor="black")
#         self.price.configure(insertbackground="black")
#         self.price.configure(selectbackground="#c4c4c4")
#         self.price.configure(selectforeground="black")
#         self.price.configure(textvariable=additem_support.price)

#         self.addbtn = Button(top)
#         self.addbtn.place(relx=0.38, rely=0.66, height=44, width=117)
#         self.addbtn.configure(activebackground="#d9d9d9")
#         self.addbtn.configure(activeforeground="#000000")
#         self.addbtn.configure(background="#009933")
#         self.addbtn.configure(disabledforeground="#a3a3a3")
#         self.addbtn.configure(font="Bold")
#         self.addbtn.configure(foreground="#fff")
#         self.addbtn.configure(highlightbackground="#d9d9d9")
#         self.addbtn.configure(highlightcolor="black")
#         self.addbtn.configure(pady="0")
#         self.addbtn.configure(text='''ADD''')
#         self.addbtn.configure(command=self.addItem)

#         self.productname_lbl = Label(top)
#         self.productname_lbl.place(relx=0.08, rely=0.2, height=21, width=83)
#         self.productname_lbl.configure(background="#ffddcc")
#         self.productname_lbl.configure(disabledforeground="#a3a3a3")
#         self.productname_lbl.configure(foreground="#000000")
#         self.productname_lbl.configure(text='''Product Name''')

#         self.barcode_lbl = Label(top)
#         self.barcode_lbl.place(relx=0.13, rely=0.31, height=21, width=49)
#         self.barcode_lbl.configure(background="#ffddcc")
#         self.barcode_lbl.configure(disabledforeground="#a3a3a3")
#         self.barcode_lbl.configure(foreground="#000000")
#         self.barcode_lbl.configure(text='''Barcode''')

#         self.price_lbl = Label(top)
#         self.price_lbl.place(relx=0.12, rely=0.42, height=21, width=63)
#         self.price_lbl.configure(background="#ffddcc")
#         self.price_lbl.configure(disabledforeground="#a3a3a3")
#         self.price_lbl.configure(foreground="#000000")
#         self.price_lbl.configure(text='''Price in USD''')

#         self.additem_lbl = Label(top)
#         self.additem_lbl.place(relx=0.33, rely=0.04, height=43, width=126)
#         self.additem_lbl.configure(background="#ffddcc")
#         self.additem_lbl.configure(disabledforeground="#a3a3a3")
#         self.additem_lbl.configure(font=font10)
#         self.additem_lbl.configure(foreground="#000000")
#         self.additem_lbl.configure(text='''Add Item''')


# if __name__ == '__main__':
#     vp_start_gui()
##############################################################################################################
#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 04, 2018 08:30:05 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

from . import additem_support
from tkinter import messagebox
from backend import models

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    additem_support.set_Tk_var()
    top = Add_Item (root)
    additem_support.init(root, top)
    root.mainloop()

w = None
def create_Add_Item(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    additem_support.set_Tk_var()
    top = Add_Item (w)
    additem_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Add_Item():
    global w
    w.destroy()
    w = None


class Add_Item:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x454+477+165")
        top.title("Add Item")
        top.configure(background="#ffddcc")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.productname_=StringVar()
        self.barcode_=StringVar()
        self.price_=DoubleVar()
        self.manufacturer_=StringVar()
        self.quantity_=IntVar()

        self.Label1 = Label(top)
        self.Label1.place(relx=0.38, rely=0.04, height=44, width=135)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffddcc")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="Bold 25")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Add Item''')

        self.productname_lbl = Label(top)
        self.productname_lbl.place(relx=0.1, rely=0.2, height=21, width=83)
        self.productname_lbl.configure(activebackground="#f9f9f9")
        self.productname_lbl.configure(activeforeground="black")
        self.productname_lbl.configure(background="#ffddcc")
        self.productname_lbl.configure(disabledforeground="#a3a3a3")
        self.productname_lbl.configure(foreground="#000000")
        self.productname_lbl.configure(highlightbackground="#d9d9d9")
        self.productname_lbl.configure(highlightcolor="black")
        self.productname_lbl.configure(text='''Product Name''')

        self.productname = Entry(top)
        self.productname.place(relx=0.28, rely=0.2, relheight=0.07
                , relwidth=0.39)
        self.productname.configure(background="white")
        self.productname.configure(disabledforeground="#a3a3a3")
        self.productname.configure(font="TkFixedFont")
        self.productname.configure(foreground="#000000")
        self.productname.configure(highlightbackground="#d9d9d9")
        self.productname.configure(highlightcolor="black")
        self.productname.configure(insertbackground="black")
        self.productname.configure(selectbackground="#c4c4c4")
        self.productname.configure(selectforeground="black")
        self.productname.configure(textvariable=self.productname_)

        self.barcode_lbl = Label(top)
        self.barcode_lbl.place(relx=0.13, rely=0.31, height=21, width=54)
        self.barcode_lbl.configure(activebackground="#f9f9f9")
        self.barcode_lbl.configure(activeforeground="black")
        self.barcode_lbl.configure(background="#ffddcc")
        self.barcode_lbl.configure(disabledforeground="#a3a3a3")
        self.barcode_lbl.configure(foreground="#000000")
        self.barcode_lbl.configure(highlightbackground="#d9d9d9")
        self.barcode_lbl.configure(highlightcolor="black")
        self.barcode_lbl.configure(text='''Bar Code''')

        self.barcode = Entry(top)
        self.barcode.place(relx=0.28, rely=0.31, relheight=0.07, relwidth=0.39)
        self.barcode.configure(background="white")
        self.barcode.configure(disabledforeground="#a3a3a3")
        self.barcode.configure(font="TkFixedFont")
        self.barcode.configure(foreground="#000000")
        self.barcode.configure(highlightbackground="#d9d9d9")
        self.barcode.configure(highlightcolor="black")
        self.barcode.configure(insertbackground="black")
        self.barcode.configure(selectbackground="#c4c4c4")
        self.barcode.configure(selectforeground="black")
        self.barcode.configure(textvariable=self.barcode_)

        self.price_lbl = Label(top)
        self.price_lbl.place(relx=0.17, rely=0.42, height=21, width=32)
        self.price_lbl.configure(activebackground="#f9f9f9")
        self.price_lbl.configure(activeforeground="black")
        self.price_lbl.configure(background="#ffddcc")
        self.price_lbl.configure(disabledforeground="#a3a3a3")
        self.price_lbl.configure(foreground="#000000")
        self.price_lbl.configure(highlightbackground="#d9d9d9")
        self.price_lbl.configure(highlightcolor="black")
        self.price_lbl.configure(text='''Price''')

        self.price = Entry(top)
        self.price.place(relx=0.28, rely=0.42, relheight=0.07, relwidth=0.39)
        self.price.configure(background="white")
        self.price.configure(disabledforeground="#a3a3a3")
        self.price.configure(font="TkFixedFont")
        self.price.configure(foreground="#000000")
        self.price.configure(highlightbackground="#d9d9d9")
        self.price.configure(highlightcolor="black")
        self.price.configure(insertbackground="black")
        self.price.configure(selectbackground="#c4c4c4")
        self.price.configure(selectforeground="black")
        self.price.configure(textvariable=self.price_)

        self.additem_btn = Button(top)
        self.additem_btn.place(relx=0.37, rely=0.77, height=44, width=117)
        self.additem_btn.configure(activebackground="#d9d9d9")
        self.additem_btn.configure(activeforeground="#000000")
        self.additem_btn.configure(background="#009933")
        self.additem_btn.configure(disabledforeground="#a3a3a3")
        self.additem_btn.configure(font="Bold")
        self.additem_btn.configure(foreground="#fff")
        self.additem_btn.configure(highlightbackground="#d9d9d9")
        self.additem_btn.configure(highlightcolor="black")
        self.additem_btn.configure(pady="0")
        self.additem_btn.configure(text='''ADD''')
        self.additem_btn.configure(command=self.addItem)
        self.manufacturer = Entry(top)
        self.manufacturer.place(relx=0.28, rely=0.52, relheight=0.07
                , relwidth=0.39)
        self.manufacturer.configure(background="white")
        self.manufacturer.configure(disabledforeground="#a3a3a3")
        self.manufacturer.configure(font="TkFixedFont")
        self.manufacturer.configure(foreground="#000000")
        self.manufacturer.configure(insertbackground="black")
        self.manufacturer.configure(textvariable=self.manufacturer_)
        self.manufacturer.configure(width=234)

        self.manufacturer_lbl = Label(top)
        self.manufacturer_lbl.place(relx=0.1, rely=0.53, height=21, width=78)
        self.manufacturer_lbl.configure(activebackground="#ffddcc")
        self.manufacturer_lbl.configure(background="#ffddcc")
        self.manufacturer_lbl.configure(disabledforeground="#a3a3a3")
        self.manufacturer_lbl.configure(foreground="#000000")
        self.manufacturer_lbl.configure(text='''Manufacturer''')

        self.quantity = Entry(top)
        self.quantity.place(relx=0.28, rely=0.62, relheight=0.07, relwidth=0.39)
        self.quantity.configure(background="white")
        self.quantity.configure(disabledforeground="#a3a3a3")
        self.quantity.configure(font="TkFixedFont")
        self.quantity.configure(foreground="#000000")
        self.quantity.configure(insertbackground="black")
        self.quantity.configure(textvariable=self.quantity_)
        self.quantity.configure(width=234)

        self.quantity_label = Label(top)
        self.quantity_label.place(relx=0.13, rely=0.63, height=21, width=52)
        self.quantity_label.configure(background="#ffddcc")
        self.quantity_label.configure(disabledforeground="#a3a3a3")
        self.quantity_label.configure(foreground="#000000")
        self.quantity_label.configure(text='''Quantity''')


    def addItem(self):
        #try:
            itemname = self.productname_.get()
            itembarcode = self.barcode_.get()
            price = float(self.price_.get())
            manufacturer = self.manufacturer_.get()
            quantity = int(self.quantity_.get())
            item = models.Inventory(itemname=itemname, price=price,barcode=str(itembarcode),manufacturer=manufacturer,quantity=quantity,sold=False)
            saved = item.save(insert=True)
            if saved == 1:
                messagebox.showinfo(title="Success", message="Item {} added successfully".format(itemname))
                self.barcode.delete(0, END)
                self.price.delete(0, END)
                self.productname.delete(0, END)
                self.productname.focus()
            else:
                messagebox.showinfo(title="Failed", message="Could not add {}".format(itemname))
        #except ValueError:
         #   messagebox.showinfo(title="Warning", message="Price, quantity, barcode must be a Numbers")


if __name__ == '__main__':
    vp_start_gui()


